#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: OWASP Dependency Check
summary: "A wrapper for the OWASP dependency check tool"
description: "Statically analyses a codebase and its dependencies for potential security vulnerabilities"
website: https://github.com/alpheroltd/bitrise-step-dependency-check
source_code_url: https://github.com/alpheroltd/bitrise-step-dependency-check
support_url: https://github.com/alpheroltd/bitrise-step-dependency-check/issues

type_tags:
  - utility

toolkit:
  go:
    package_name: github.com/alpheroltd/bitrise-step-dependency-check
    
deps:
  brew:
    - name: dependency-check

inputs:
  # Main inputs
  - project_name:
    opts:
      title: Project Name
      summary: The name of the project being scanned
  - scan_path: .
    opts:
      title: Scan Path
      summary: A path pattern to scan for vulnerabilities
      description: |-
        Supports [ANT](https://ant.apache.org/manual/dirtasks.html) styled path patterns, eg `/src/**/*.java`
      is_required: true
  - exclude_path:
    opts:
      title: "Exclude path"
      summary: A path pattern to exclude from the scan
      description: |-
        Supports [ANT](https://ant.apache.org/manual/dirtasks.html) styled path patterns, eg `/src/**/*.java`
  - suppression_file:
    opts:
      title: Suppression File
      summary: A path to any suppression file
  - fail_on_cvss:
    opts:
      title: CVSS score threshold
      summary: Fail if any vulnerability has a CVSS score equal or greater. Value must be between 0 and 10 (inclusively). If empty this behaviour is ignored
      description: |-
        Fail if any vulnerability has a CVSS score equal or greater. Value must be between 0 and 10 (inclusively). If empty this behaviour is ignored

        After the analysis completes every identified vulnerabilty will likely have a [CVSS score](https://nvd.nist.gov/vuln-metrics/cvss)
        This value is a threshold for analysis failure. If a vulnerability is found and is at least the specified then this step will fail.

        Leave this empty if you do not want the step to ever fail.

  - fail_step_if_vulnerability_found: "yes"
    opts:
      title: Fail step if vulnerabilities are found
      summary: If `yes`, this step will fail if the dependency check scan found a vulnerability that is at least the CVSS score threshold. If `no`, this step will always pass unless a runtime error occurred.
      value_options:
      - "yes"
      - "no"

  # Category Config
  - enable_experimetnal_analyzers: "yes"
    opts:
      category: Config
      title: Enable Experimental Analyzers
      summary: If `yes` the analysis will also use some [experimental analyzers](https://jeremylong.github.io/DependencyCheck/analyzers/index.html)
      is_required: true
      value_options:
      - "yes"
      - "no"
  - data_path: /tmp/dependancy-check-cache
    opts:
      category: Config
      title: "Database path"
      summary: A path to where all the downloaded vulnerability databases are stored                
      is_expand: true
      is_dont_change_value: true
      is_required: false
  # Category Outputs
  - output_path: "$BITRISE_DEPLOY_DIR"
    opts:
      category: Output
      title: A path to write the reports
      is_required: true
  - report_formats: "HTML"
    opts:
      category: Output
      title: Report formats
      summary: A `|` separated list of valid dependancy check report formats. Only accepts `HTML`, `XML`, `CSV`, `JSON`, `JUNIT`, `SARIF` values
      is_required: true
  - cache_database: "yes"
    opts:
      category: Output
      title: Cache vulnerabilty databases?
      summary: If `yes`, then the downloaded vulnerability databases will be added to the bitrise cache. Highly recommended to have on
      value_options:
      - "yes"
      - "no"
  # Category Debug
  - debug: "no"
    opts:
      category: Debug
      title: Enable verbose logging
      summary: If this input is set, the Step will print additional logs for debugging.
      value_options:
      - "yes"
      - "no"
  - extra_args:
    opts:
      category: Debug
      title: Extra command arguments
      description: |-
        Add any more command line arguments you want to run the tool with from [this list](https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html).
        These args are appended to the end but cannot guarantee overriding any behaviour.

outputs:
  - DEPENDENCY_CHECK_RESULT:
    opts:
      title: Dependency check result
      summary: A string representing the result of the dependency analysis. Either `PASS` or `FAIL`
      description: |-
        Represents either the pass or fail result of the dependency check tool. 
        The value will be `PASS` if the tool found no vulnerabilities, `FAIL` if one or more were found, or empty if something went wrong. 
        This value can be `FAIL` even if `fail_step_if_vulnerability_found` is set to `no`.
  - DEPENDENCY_CHECK_HTML_REPORT_PATH:
    opts:
      title: HTML report
      summary: Path to the generated HTML report
  - DEPENDENCY_CHECK_XML_REPORT_PATH:
    opts:
      title: XML report
      summary: Path to the generated XML report
  - DEPENDENCY_CHECK_CSV_REPORT_PATH:
    opts:
      title: CSV report
      summary: Path to the generated CSV report
  - DEPENDENCY_CHECK_JSON_REPORT_PATH:
    opts:
      title: JSON report
      summary: Path to the generated JSON report
  - DEPENDENCY_CHECK_JUNIT_REPORT_PATH:
    opts:
      title: JUnit report
      summary: Path to the generated JUnit report
  - DEPENDENCY_CHECK_SARIF_REPORT_PATH:
    opts:
      title: SARIF report
      summary: Path to the generated SARIF report

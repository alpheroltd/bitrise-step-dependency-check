#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Dependency Check
summary: |
  A wrapper for the OWASP dependency check tool
description: |
  Statically analyses a codebase and its dependencies for potential security vulnerabilities
website: https://gitlab.com/connor13/bitrise-step-dependency-check
source_code_url: https://gitlab.com/connor13/bitrise-step-dependency-check
support_url: https://gitlab.com/connor13/bitrise-step-dependency-check

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
# project_type_tags:
#   - ios
#   - macos
#   - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - utility

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake


toolkit:
  go:
    package_name: gitlab.com/connor13/bitrise-step-dependency-check
  # bash:
  #   entry_file: step.sh

deps:
  brew:
    - name: dependency-check

inputs:
  - output_path: .
    opts:
      title: A path to write the reports
      is_required: true
  - debug: no
    opts:
      category: Debug
      title: Enable verbose logging
      summary: If this input is set, the Step will print additional logs for debugging.
      is_required: true
      value_options:
      - "yes"
      - "no"
  - cache_database: yes
    opts:
      title: Cache vulnerabilty record?
      summary: If enabled, this step will automatically cache the downloaded vulnerability databases.
               This can greatly increase step performance as it can skip downloading in most cases.
      is_required: true
      value_options:
      - "yes"
      - "no"
  - data_path: /tmp/dependancy-check-cache
    opts:
      title: "Database path"
      summary: A path to where all the downloaded vulnerability databases are stored
      description: |
        Description of this input.

        Can be Markdown formatted text.
      is_expand: true
      is_dont_change_value: true
      is_required: false
  - project_name:
    opts:
      title: "Project Name"
  - scan_path: .
    opts:
      title: "Scan Path"
      is_required: true
  - suppression_file:
    opts:
      title: Suppression File
      summary: A path to any suppression file
  - report_formats: "HTML"
    opts:
      title: Report formats
      summary: A '|' separated list of valid dependancy check report formats. "HTML" by default
  - extra_args:
    opts:
      title: Define any more commands you would like to pass to the dependency check tool

outputs:
  - DEPENDENCY_CHECK_HTML_REPORT_PATH:
    opts:
      title: HTML report
      summary: Path to the generated HTML report
  - DEPENDENCY_CHECK_XML_REPORT_PATH:
    opts:
      title: XML report
      summary: Path to the generated XML report
  - DEPENDENCY_CHECK_CSV_REPORT_PATH:
    opts:
      title: CSV report
      summary: Path to the generated CSV report
  - DEPENDENCY_CHECK_JSON_REPORT_PATH:
    opts:
      title: JSON report
      summary: Path to the generated JSON report
  - DEPENDENCY_CHECK_JUNIT_REPORT_PATH:
    opts:
      title: JUnit report
      summary: Path to the generated JUnit report
  - DEPENDENCY_CHECK_SARIF_REPORT_PATH:
    opts:
      title: SARIF report
      summary: Path to the generated SARIF report
